// Generated by CoffeeScript 1.7.1
(function() {
  var qs, req, request;

  qs = require('querystring');

  request = require('request');

  module.exports = {
    postUrl: function(self) {
      return 'http://api.tumblr.com/v2/blog/' + self.host + '/post';
    },
    editUrl: function(self) {
      return 'http://api.tumblr.com/v2/blog/' + self.host + '/post/edit';
    },
    blogUrl: function(action, self, options) {
      var params, query;
      if (options == null) {
        options = {};
      }
      params = ['http://api.tumblr.com/v2/blog/', self.host + '/' + action, options.type != null ? '/' + options.type : void 0, '?'];
      if (options.type != null) {
        delete options.type;
      }
      options.api_key = self.oauth.consumer_key;
      query = qs.stringify(options);
      params.push(query);
      return params.join('');
    },
    userUrl: function(action, options) {
      var params, query;
      if (options == null) {
        options = {};
      }
      query = qs.stringify(options);
      params = "http://api.tumblr.com/v2/user/" + action + "?" + query;
      return params;
    },
    taggedUrl: function(self, options) {
      if (options == null) {
        options = {};
      }
      options.api_key = self.oauth.consumer_key;
      return "http://api.tumblr.com/v2/tagged?" + (qs.stringify(options));
    },
    get: function(url, fn) {
      return req(url, 'GET', fn);
    },
    post: function(url, fn, oauth, data) {
      return req(url, 'POST', fn, oauth, data);
    },
    oauthGet: function(url, oauth, fn) {
      return req(url, 'GET', fn, oauth);
    },
    oauthPost: function(url, oauth, fn) {
      return req(url, 'POST', fn, oauth);
    }
  };

  req = function(url, method, fn, oauth, data) {
    var options;
    if (method == null) {
      method = 'GET';
    }
    options = {
      url: url,
      method: method,
      followRedirect: false,
      json: true,
      protocol: 'http:'
    };
    if (oauth != null) {
      options.oauth = oauth;
    }
    if (data != null) {
      options.json = false;
    }
    if (data != null) {
      options.form = data;
    }
    return request(options, function(error, response, body) {
      var _ref;
      if (!error && ((_ref = response.statusCode) !== 200 && _ref !== 301)) {
        try {
          body = JSON.parse(body);
        } catch(ex) {
          // do nothing and pray for the best
        }

        error = "" + response.statusCode;

        if(typeof body.meta !== 'undefined') {
          error += " " + body.meta.msg;
        }
      }
      if (fn != null) {
        return fn.call(body, error, body.response);
      }
    });
  };

}).call(this);
